local intl = require "deploy.intl"
local path = require "path"
local util = require "deploy.util"
local read_file = util.read_file
local write_file = util.write_file

local function export(format, out_dir)
  path.mkdir(out_dir)
  path.each(path.join("intl", "*.lua"), function (intl_file)
      local data = intl.parse("lua", read_file(intl_file))
      local filename = path.join(out_dir, path.splitext(path.basename(intl_file)) .. "." .. format)
      write_file(filename, intl.stringify(format, data))
  end)
end

local function import_file(filename)
  if not path.isfile(filename) and not path.islink(filename) then
    return
  end

  local basename, ext = path.splitext(path.basename(filename))
  ext = ext:gsub("^[.]", "")

  if not (ext == "lua" or ext == "csv" or ext == "json") then
    return
  end

  local new_data = intl.parse(ext, read_file(filename))

  local target_path = path.join("intl", basename .. ".lua")

  local ok, old_raw_data = pcall(function () return read_file(target_path) end)
  if ok then
    local old_data = intl.parse("lua", old_raw_data)
    new_data = intl.merge(old_data, new_data)
  end

  write_file(target_path, intl.stringify("lua", new_data))
end

local function import(in_file_or_dir)
  if path.isfile(in_file_or_dir) or path.islink(in_file_or_dir) then
    import_file(in_file_or_dir)
  elseif path.isdir(in_file_or_dir) then
    path.each(path.join(in_file_or_dir, "*"), "f", import_file, { recurse = true })
  end
end

return {
  export = export,
  import = import,
}
