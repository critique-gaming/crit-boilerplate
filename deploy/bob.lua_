local dotenv = require("deploy.dotenv")
local util = require("deploy.util")
local shell = require("shell")
local api = require("deploy.api")
local java = require("deploy.java")

local bob_path = dotenv.getenv("BOB")
if not bob_path then
  print("Please set the BOB env var to the path to bob.jar")
  os.exit(1)
end

local M = {}

function M.run(args)
  local java_args = java.make_java_args()
  table.insert(java_args, "-Xmx5g")
  table.insert(java_args, "-jar")
  table.insert(java_args, bob_path)
  for _, v in ipairs(args) do
    table.insert(java_args, v)
  end
  if dotenv.verbose then
    print(shell.escape(java_args))
  end
  shell.pexecute(java_args)
end

-- Add any dependency that you want to omit on a particular platform
local per_platform_removed_dependencies = {
  switch = { "subsoap/defos" },
  ios = { "subsoap/defos" },
  android = { "subsoap/defos" },
}

api.run_hook("resolve:per_platform_removed_dependencies", per_platform_removed_dependencies)

function M.get_platform_dependencies(opts, platform)
  -- Add any dependency you want to add depending on platform or options
  local additional_deps = {}
  local removed_deps = per_platform_removed_dependencies[platform] or {}

  return api.reduce_hook("resolve:per_platform_dependencies", additional_deps, removed_deps)
end

function M.modify_dependencies_string(deps_string, additional_deps, removed_deps)
  local deps = {}
  for dep in deps_string:gmatch('[^,]+') do
    local removed = false
    if removed_deps then
      for _, item in ipairs(removed_deps) do
        if dep:match(item) then
          removed = true
          break
        end
      end
    end
    if not removed then
      deps[#deps + 1] = dep
    end
  end

  if additional_deps then
    for i = 1, #additional_deps do
      deps[#deps + 1] = additional_deps[i]
    end
  end

  return table.concat(deps, ",")
end

function M.inject_dependencies_string(project_str, additional_deps, removed_deps)
  return project_str:gsub("(dependencies = )([^\n%s]*)", function (match_start, deps_string)
    return match_start .. M.modify_dependencies_string(deps_string, additional_deps, removed_deps)
  end)
end

function M.inject_dependencies(additional_deps, removed_deps)
  local game_project_path = "game.project"

  local project_str = util.read_file(game_project_path)
  local original_project_str = project_str

  project_str = M.inject_dependencies_string(project_str, additional_deps, removed_deps)

  if project_str == original_project_str then
    return function () end, false
  end

  util.write_file(game_project_path, project_str)

  return function ()
    util.write_file(game_project_path, original_project_str)
  end, true
end

function M.resolve(opts)
  print("Fetching dependencies...")

  local bob_args = { "--email", "foo@bar.com", "--auth", "12345", "resolve" }

  if opts and opts.defoldsdk and opts.defoldsdk ~= "" then
    bob_args[#bob_args + 1] = "--defoldsdk"
    bob_args[#bob_args + 1] = opts.defoldsdk
  end

  local restore, made_changes = M.inject_dependencies(M.get_platform_dependencies(opts, opts and opts.platform))
  if made_changes then
    local ok, error_msg = pcall(function ()
      M.run(bob_args)
    end)

    restore()

    if not ok then
      error(error_msg)
    end
  else
    M.run(bob_args)
  end
end

return M
