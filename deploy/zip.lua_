local shell = require("shell")
local path = require("path")
local dotenv = require("deploy.dotenv")

local M = {}

local function ensure_binaries()
  if not M.zip_bin then
    if dotenv.os_name == "Windows" then
      M.zip_bin = path.fullpath(path.join("deploy", "bin", "windows-x86_64", "zip.exe"))
    else
      M.zip_bin = "zip"
    end
  end
  if not M.unzip_bin then
    if dotenv.os_name == "Windows" then
      M.unzip_bin = path.fullpath(path.join("deploy", "bin", "windows-x86_64", "unzip.exe"))
    else
      M.unzip_bin = "unzip"
    end
  end
end

M.ensure_binaries = ensure_binaries

local tunpack = unpack or table.unpack

function M.create(input_dir, output_file, path_levels, extra_args)
  ensure_binaries()

  local out_handle = assert(io.open(output_file, "wb"))

  local pwd = path.currentdir()

  local current_dir = path.fullpath(input_dir)
  local zipped_path

  path_levels = path_levels or 0
  for i = 1, path_levels do
    local component
    current_dir, component = path.splitpath(current_dir)
    zipped_path = path.join(component, zipped_path)
  end

  path.chdir(current_dir)

  local in_handle, err = io.popen(shell.escape({
    M.zip_bin, "-r", "-", zipped_path or ".", "-X", tunpack(extra_args or {})
  }, true), "r")
  assert(in_handle, err)
  while true do
    local data = in_handle:read(4096)
    if not data then break end
    assert(out_handle:write(data))
  end
  in_handle:close()
  out_handle:close()

  path.chdir(pwd)
end

function M.list(zip_path)
  ensure_binaries()

  local list = {}
  local output = shell.run({ M.unzip_bin, "-l", "-v", zip_path })

  local column_names
  local parsing = false
  local column_maps = {
    ["Name"] = "name",
    ["CRC-32"] = "hash",
  }

  for line in output:gmatch("[^\r\n]+") do
    if not column_names then
      if not line:match("^Archive:") then
        column_names = {}
        for column in line:gmatch("[^ ]+") do
          column_names[#column_names + 1] = column
        end
      end

    else
      if line:match("^%-%-") then
        parsing = not parsing

      elseif parsing then
        local start = 1
        local entry = {}
        for i = 1, #column_names - 1 do
          local _, word_end, value = line:find("([^ ]+)", start)
          if word_end then
            start = word_end + 1
          end
          if value then
            local column_name = column_names[i]
            local column_id = column_maps[column_name] or column_name
            entry[column_id] = value
          end
        end

        local start_word = line:find("([^ ])", start)
        if start_word then
          entry.name = line:sub(start_word)
        end

        list[#list + 1] = entry
      end
    end
  end

  return list
end

function M.unzip(zip_path)
  ensure_binaries()
  shell.run({ M.unzip_bin, zip_path })
end

function M.zip_files(zip_path, files)
  ensure_binaries()

  local h = io.popen(shell.escape({ M.zip_bin, "-@", zip_path}), "w")
  for _, file in ipairs(files) do
    h:write(file .. "\n")
  end
  h:close()
end

return M
