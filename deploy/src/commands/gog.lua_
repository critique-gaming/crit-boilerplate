local M = {}

M.id = "cmd_gog"

local cmd_build = require "deploy.src.commands.build"

function M.parser_config(parser)
  local dotenv = require("deploy.src.dotenv")
  local cmd = parser:command("gog", "Build and upload game to GOG.com"):target("cmd_gog")
  cmd:argument("branch", "The branch to build to. Omit to build all branches" ):args("?")
  cmd:argument("platform", "One of windows, mac, linux. Omit to build for all desktop platforms"):args("?")
  cmd:flag("--skip-build", "Skip building (just upload)")
  cmd:option("-bo --build-output", "Build output directory")
  cmd_build.arg_config(cmd)
  cmd:option("--gog-pipeline-builder", "Path to GOG Galaxy Pipeline Builder", dotenv.getenv("GOG_PIPELINE_BUILDER"))
  cmd:option("--gog-user", "GOG.com account ID", dotenv.getenv("GOG_USER"))
  cmd:option("--gog-password", "GOG.com account password", dotenv.getenv("GOG_PASSWORD")):show_default(false)
  cmd_build.arg_config_mac(cmd)
end

function M.run(args)
  cmd_build.setup(args)

  local gog = require("deploy.src.gog")
  gog.with_hooks(function ()
    if not args.skip_resolve and not args.skip_build then
      local bob = require("deploy.src.bob")
      bob.resolve()
    end

    local project_dir = _G.project_dir or "."

    local path = require("path")
    if args.branch then
      local build_dir = args.build_output or path.join(project_dir, "dist", "gog", args.branch)
      gog.gog_upload(args.branch, args.platform and { args.platform }, build_dir, args)
    else
      local build_dir = path.join(args.build_output or path.join(project_dir, "dist", "gog"))
      gog.gog_upload_all(build_dir, args)
    end
  end)
end

return M
