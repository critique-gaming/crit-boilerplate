local zip = require("deploy.zip")
local path = require("path")
local shell = require("deploy.lib.shell")
local read_project = require("deploy.project")
local dotenv = require("deploy.dotenv")

local run_with_filter = function (args, filter)
  local h = io.popen(shell.escape(args))
  while true do
    local line = h:read("*l")
    if not line then break end
    filter(line)
  end
  h:close()
end

local urand = assert (io.open ('/dev/urandom', 'rb'))

local function rng (b, m, r)
  b = b or 4
  m = m or 256
  r = r or urand
  local n, s = 0, r:read (b)

  for i = 1, s:len () do
    n = m * n + s:byte (i)
  end

  return n
end

local function notarize(app_path, options)
  if dotenv.os_name ~= "Darwin" then
    error("Notarization is only supported on macOS")
  end

  local username = options.apple_id
  local password = options.apple_id_password
  assert(username, "--apple-id is required")
  assert(password, "--apple-id-password is required")

  local has_ticket
  run_with_filter({ "xcrun", "stapler", "staple", app_path }, function (line)
    has_ticket = has_ticket or line:find("The staple and validate action worked!")
  end)
  if has_ticket then
    print("This app is already notarized. Skipping notarization.")
    return
  end

  local bundle_id = read_project().title:gsub("[^a-zA-Z0-9]", "") .. ".notarized." .. rng()
  print("Notarizing app... (ID " .. bundle_id .. ")")

  local zip_path = app_path .. ".notarize.zip"
  zip.create(app_path, zip_path, 1)

  local cleanup = function ()
    pcall(function () path.remove(zip_path) end)
  end

  local request_uuid
  local ok, error_msg = pcall(function ()
    local args = {
      "xcrun", "altool",
      "--notarize-app",
      "--primary-bundle-id", bundle_id,
      "--file", zip_path,
      "--username", username, "--password", password,
    }
    if options.asc_provider then
      args[#args + 1] = "--asc-provider"
      args[#args + 1] = options.asc_provider
    end

    run_with_filter(args, function (line)
      print(line)
      request_uuid = request_uuid or line:match("^%s*RequestUUID =%s*([0-9a-zA-Z-]+)")
    end)

    if not request_uuid then
      error("Notarize call didn't return a RequestUUID")
    end
  end)

  if not ok then
    cleanup()
    error(error_msg)
  end

  cleanup()

  return request_uuid
end

local function wait(request_uuid, options)
  if not request_uuid then
    return
  end

  local username = options.apple_id
  local password = options.apple_id_password
  assert(username, "--apple-id is required")
  assert(password, "--apple-id-password is required")

  print("Waiting for notarization to finish...")

  local final_status
  while true do
    local status, log_file
    run_with_filter({
      "xcrun", "altool",
      "--notarization-info", request_uuid,
      "--username", username, "--password", password,
    }, function (line)
      status = status or line:match("^%s*Status:%s*(.*)$")
      log_file = log_file or line:match("^%s*LogFileURL:%s*(.*)$")
    end)

    if status ~= "in progress" then
      print("Notarization finished with status: " .. (status or "nil"))
      final_status = status
      if log_file then
        print("Log file URL: " .. log_file)
      end
      break
    end

    print("Notarization in progress. Waiting 30s before checking again...")
    shell.pexecute({"sleep", "30"})
  end

  if final_status ~= "success" then
    error("Notarization failed with status " .. final_status)
  end
end

local function staple(app_path)
  print("Stapling notarization ticket to app...")
  shell.pexecute({ "xcrun", "stapler", "staple", app_path })
end

local function notarize_and_staple(app_path, options)
  local request_uuid = notarize(app_path, options)
  wait(request_uuid, options)
  staple(app_path)
end

return {
  notarize = notarize,
  wait = wait,
  staple = staple,
  notarize_and_staple = notarize_and_staple,
}
