local path = require("path")
local read_project = require("deploy.project")
local zip = require("deploy.zip")
local util = require("deploy.util")

local filenames = {
  windows = "_win.zip",
  mac = "_macos.zip",
  linux = "_linux.zip",
  web = "_web.zip",
  android = "_android.aab",
  ios = "_ios.ipa",
}

local function package_build(platform, input_dir, output_dir, options)
  print("Packaging for " .. platform .. "...")

  local filename = filenames[platform]
  if not filename then
    error("Unsupported platform")
  end

  local project_title = read_project().title
  filename = project_title .. filename


  local public_dir = path.join(output_dir, "public")
  local private_dir = path.join(output_dir, "private")
  path.mkdir(output_dir)
  path.mkdir(private_dir)
  path.mkdir(public_dir)

  local package_filename = path.join(public_dir, filename)
  print("Packaging output: " .. package_filename)

  path.copy(path.join(input_dir, 'VERSION.txt'), path.join(output_dir, 'VERSION.txt'))

  if platform == "ios" then
    path.copy(path.join(input_dir, project_title .. ".ipa"), package_filename)
    zip.create(
      path.join(input_dir, project_title .. ".dSYM"),
      path.join(private_dir, project_title .. "_ios_symbols.zip"),
      1
    )

  elseif platform == "android" then
    local aab_path = path.join(input_dir, project_title, project_title .. ".aab")
    path.copy(aab_path, package_filename)
    zip.create(
      path.join(input_dir, project_title, project_title .. ".apk.symbols"),
      path.join(private_dir, project_title .. "_android_symbols.zip"),
      1
    )

    local bundletool = require("deploy.bundletool")
    local cmd = bundletool.build_args()
    if cmd then
      local package_basename = path.splitext(package_filename)
      local apks_filename = path.fullpath(package_basename .. ".apks")
      local apk_filename = package_basename .. ".apk"

      os.remove(apks_filename)
      os.remove(apk_filename)

      cmd[#cmd+1] = "build-apks"
      cmd[#cmd+1] = "--bundle=" .. aab_path
      cmd[#cmd+1] = "--output=" .. apks_filename
      cmd[#cmd+1] = "--mode=universal"
      if options.android_keystore then
        cmd[#cmd+1] = "--ks=" .. options.android_keystore
      end
      if options.android_keystore_alias then
        cmd[#cmd+1] = "--ks-key-alias=" .. options.android_keystore_alias
      end
      if options.android_keystore_password then
        cmd[#cmd+1] = "--ks-pass=pass:" .. options.android_keystore_password
      elseif options.android_keystore_password_file then
        cmd[#cmd+1] = "--ks-pass=file:" .. options.android_keystore_password_file
      end

      local shell = require("shell")
      shell.pexecute(cmd)

      local pwd = path.currentdir()
      path.mkdir(package_basename)
      path.chdir(package_basename)
      zip.unzip(apks_filename)
      path.chdir(pwd)
      path.rename(path.join(package_basename, "universal.apk"), apk_filename)
      util.rmdir(package_basename)
      os.remove(apks_filename)
    end

  elseif platform == "web" then
    zip.create(path.join(input_dir, project_title), package_filename)

  elseif platform == "mac" then
    zip.create(path.join(input_dir, project_title .. ".app"), package_filename, 1)
    zip.create(
      path.join(input_dir, project_title .. ".dSYM"),
      path.join(private_dir, project_title .. "_macos_symbols.zip"),
      1
    )

  elseif platform == "windows" then
    zip.create(path.join(input_dir, project_title), package_filename, 1)
    path.copy(path.join(input_dir, "dmengine.pdb"), path.join(private_dir, "dmengine.pdb"))

  else
    zip.create(input_dir, package_filename, nil, { '-x', 'VERSION.txt' })

  end
end

return package_build
