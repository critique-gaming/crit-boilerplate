local path = require("path")
local shell = require("shell")
local read_project = require("deploy.project")
local notarize = require("deploy.notarize")
local util = require("deploy.util")
local api = require("deploy.api")

local function steam_upload(branch, build_dir, options)
  print("Building for Steam branch \"" .. branch .. "\"...")

  assert(options.steamcmd, "--steamcmd is required")
  assert(options.steam_user, "--steam-user is required")
  assert(options.steam_password, "--steam-password is required")

  local config = require("deploy.config.steam")
  local branch_config = config.branches[branch]
  assert(branch_config, "No such Steam branch defined in config: " .. branch)

  local build_options = util.deep_clone(branch.build_options)
  build_options.mac_identity = options.mac_identity

  path.mkdir(build_dir)

  local template_args = util.deep_clone(read_project())
  template_args.preview = options.preview and "1" or "0"
  template_args.full_version = template_args.full_version .. (build_options.version_suffix or "")

  for k, v in pairs(branch_config.template) do
    template_args[k] = v
  end

  local platforms = { "mac", "windows", "linux" }

  if not options.skip_build then
    local build = require("deploy.build")
    local mac_app_path, notarization_request_uuid
    for _, platform in ipairs(platforms) do
      local build_output = path.join(build_dir, platform)
      build(platform, build_output, build_options)

      if platform == "mac" and not options.skip_notarize and options.apple_id and options.apple_id_password then
        mac_app_path = path.join(build_output, template_args.title .. ".app")
        notarization_request_uuid = notarize.notarize(mac_app_path, options)
      end
    end

    if notarization_request_uuid then
      notarize.wait(notarization_request_uuid, options)
      notarize.staple(mac_app_path)
    end
  end


  local app_vdf
  local branch_dir = path.join("deploy", "steam", branch)
  path.each(path.join(branch_dir, "*.vdf"), function (vdf_filename)
    if vdf_filename:find("app_build") then
      app_vdf = vdf_filename
    end
    util.template(
      path.join(branch_dir, vdf_filename),
      path.join(build_dir, vdf_filename),
      template_args
    )
  end, { param = "n" })

  assert(app_vdf, "Your branch must contain an app_build VDF file")

  print("Uploading to Steam branch \"" .. branch .. "\"...")
  shell.pexecute({ options.steamcmd,
    "+login", options.steam_user, options.steam_password,
    "+run_app_build", path.fullpath(path.join(build_dir, app_vdf)),
    "+quit",
  })
end

local function steam_login(options)
  assert(options.steamcmd, "--steamcmd is required")
  assert(options.steam_user, "--steam-user is required")
  assert(options.steam_password, "--steam-password is required")

  print("Testing Steam login...")
  shell.pexecute({ options.steamcmd,
    "+login", options.steam_user, options.steam_password,
    "+quit",
  })
end

local function steam_upload_all(build_dir, options)
  local config = require("deploy.config.steam")
  for branch in pairs(config.branches) do
    steam_upload(branch, path.join(build_dir, branch), options)
  end
end

local function with_hooks(f)
  api.hook_closure(function ()
    api.register_hook("resolve:per_platform_dependencies", function (additional_deps, removed_deps)
      local dotenv = require("deploy.dotenv")
      local config = require("deploy.config.steam")
      additional_deps[#additional_deps + 1] = dotenv.getenv("STEAMWORKS_DEPENDENCY_URL")
        or config.steamworks_dependency_url
    end)

    api.register_hook("build:bob_args", function (bob_args, context)
      util.add_settings_file(bob_args, "steam", context.option.debug)
    end)

    api.register_hook("build:game_project", function (overrides, context)
      util.set_init(overrides, "crit", "steam", 1)
    end)

    f()
  end)
end

return {
  steam_upload_all = steam_upload_all,
  steam_upload = steam_upload,
  steam_login = steam_login,
  with_hooks = with_hooks,
}
