local function read_file(filename)
  local f, err = io.open(filename, "rb")
  assert(f, err)
  local data = f:read("*all")
  f:close()
  return data
end

local function write_file(filename, data)
  local f, err = io.open(filename, "wb")
  assert(f, err)
  f:write(data)
  f:close()
end

local function template(source, destination, args)
  local f, err = io.open(source, "r")
  assert(f, err)
  local text = f:read("*all")
  f:close()

  text = text:gsub("${([a-zA-Z_][a-zA-Z_0-9]*)}", args)

  f, err = io.open(destination, "w")
  assert(f, err)
  f:write(text)
  f:close()
end

local function deep_clone(t)
  if type(t) ~= "table" then
    return t
  end

  local new_t = {}
  for k, v in pairs(t) do
    new_t[deep_clone(k)] = deep_clone(v)
  end
  return new_t
end

local function set_ini(ini, category, key, value)
  ini[category] = ini[category] or {}
  ini[category][key] = value
end

local function add_settings_file(bob_args, filename, debug)
  local path = require("path")
  local fpath = path.join("deploy", "config", "project_properties", filename)

  local general_file = fpath .. ".ini"
  if path.isfile(general_file) then
    table.insert(bob_args, "--settings")
    table.insert(bob_args, general_file)
  end

  local variant_file = fpath .. (debug and "_debug" or "_release") .. ".ini"
  if path.isfile(variant_file) then
    table.insert(bob_args, "--settings")
    table.insert(bob_args, variant_file)
  end
end

local function rmdir(p)
  local path = require("path")
  pcall(function ()
    path.each(path.join(p,"*"), function(P)
      path.remove(P)
    end,{
      param = "f";   -- request full path
      delay = true;   -- use snapshot of directory
      recurse = true; -- include subdirs
      reverse = true; -- subdirs at first
    })
    path.remove(p)
  end)
end

return {
  read_file = read_file,
  write_file = write_file,
  template = template,
  deep_clone = deep_clone,
  set_ini = set_ini,
  add_settings_file = add_settings_file,
  rmdir = rmdir,
}
